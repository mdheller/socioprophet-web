import type { EventEnvelope } from '../../types/globals/events'; const MOCK=(import.meta as any).env.VITE_MOCK==='1'; const now=()=>new Date().toISOString(); const mockEvents:EventEnvelope[]=[{ts:now(),space:'twin',ns:'default',actor:{id:'usr',pk:'ed25519:…'},kind:'ai.message',body:{role:'user',text:'Hello'}}]; async function* stream<T>(arr:T[],d=300){for(const it of arr){await new Promise(r=>setTimeout(r,d));yield it}} export const triRpc={journal:{async append(e:EventEnvelope){if(MOCK){mockEvents.push(e);return{feed:'f0',offset:mockEvents.length,sig:'sig'}}throw new Error('wire real')},async snapshot(q:any){if(MOCK){return{entries:mockEvents.slice(-50)}}throw new Error('wire real')},subscribe(q:any){if(MOCK){return stream(mockEvents,500)}throw new Error('wire real')}},code:{async search(p:any){if(MOCK){return{results:[{repo:'core',path:'src/main.go',preview:'func main() { … }'}]}}throw new Error('wire real')}} }